R e a d m e
-----------

Set/Get:
(block as IMyOreDetector).SetValue("RaycastTarget", block.GetPosition() + block.WorldMatrix.Forward * 50);
var result = (block as IMyOreDetector).GetValue<MyDetectedEntityInfo>("RaycastResult");

The implementation is only added to MyOreDetector. Other IMyOreDetectors (possibly from other mods) will not get these properties.
These properties are not visible from the terminal and are (probably) not saved.

pseudo interface IMyOreDetector
{
    //! Ore names that will be ignored by the ray.
    //! Case sensitive.
    //! Can be multiple names with any separators, checked with ex.: "Hello IceWorld!".Contains("Ice") //true
    //! "Stone" initially
    string OreBlacklist { get; set; }
    
    //! Function parameter for Raycast. Does nothing on its own.
    //! End point of the ray in absolute world coordinates.
    //! The ray source is MyOreSensor.GetPosition()
    //! Vector3D RaycastTarget { get; set; }
    
    //! Return value of Raycast.
    //! Calculated on every get call. Can be called multiple times per update.
    //! Returns new MyDetectedEntityInfo() on error
    //! Only some fields are filled even if something is hit.
    //!    EntityId: 1 ?? 0 (Ore patches dont have unique ID)
    //!    Name: MyVoxelMaterialDefinition.MinedOre ?? ""
    //!    Type: Unknown ?? None
    //!    HitPosition: (absolute world coordinates fluctuating with an inaccuracy of 1m + distance/100) ?? null
    //!    TimeStamp: GameDateTime.Ticks [100ns]
    MyDetectedEntityInfo RaycastResult { get; }
    
    //! Charge that increases by 2km/s consumed by Raycast.
    //! If the requested Raycast target is further, the available charge is used for a shorter ray.
    //! The requested length is consumed even if the hit was closer.
    //! The upper limit (capacity) is 100km.
    //! Unlike camera, it always charges, does not need to be enabled and does not require extra power.
    double AvailableScanRange { get; }
}
